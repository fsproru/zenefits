export declare class Zenefits {
    access_token: string;
    refresh_token: string;
    client_id: string;
    client_secret: string;
    urlBase: string;
    platformBaseUrl: string;
    secureBaseUrl: string;
    coreBaseUrl: string;
    applicationId: string;
    installId: string;
    set: any;
    credentialsRefreshed: boolean;
    autoPagination: boolean;
    runCollector: boolean;
    constructor(opts: any);
    _request(method: string, url: string, data: any, singleton: boolean, cb: any, pageCB?: any): void;
    fetchAccessToken(code: string, redirectUri: string, cb: (error: Error, payload: any) => void): void;
    fetchResourceUrl(url: string, method: string, data: any, singleton: boolean, cb: (error: Error, payload: any) => void, pageCB?: any): void;
    core(type: string, id: string, singleton: boolean, cb: any, pageCB?: any): void;
    platform(method: string, type: string, id: string, data: any, singleton: boolean, cb: any, pageCB?: any): void;
    companies(cb: any, pageCB?: any): void;
    company(companyId: string, cb: any, pageCB?: any): void;
    people(cb: any, pageCB?: any): void;
    person(personId: string, cb: any, pageCB?: any): void;
    employments(cb: any, pageCB?: any): void;
    employment(employmentId: string, cb: any, pageCB?: any): void;
    companyBankAccounts(cb: any, pageCB?: any): void;
    companyBankAccount(accountId: string, cb: any, pageCB?: any): void;
    employeeBankAccounts(cb: any, pageCB?: any): void;
    employeeBankAccount(accountId: string, cb: any, pageCB?: any): void;
    departments(cb: any, pageCB?: any): void;
    department(deptId: string, cb: any, pageCB?: any): void;
    locations(cb: any, pageCB?: any): void;
    location(locId: string, cb: any, pageCB?: any): void;
    currentAuthorizedUser(cb: any, pageCB?: any): void;
    applications(cb: any, pageCB?: any): void;
    application(applicationId: string, cb: any, pageCB?: any): void;
    setInstallationCustomFields(fields: any, cb: any, pageCB?: any): void;
    installations(cb: any, pageCB?: any): void;
    installation(installId: string, cb: any, pageCB?: any): void;
    personSubscriptions(cb: any, pageCB?: any): void;
    personSubscription(subscriptionId: string, cb: any, pageCB?: any): void;
    setInstallationStatusOk(cb: any, pageCB?: any): void;
    setInstallationStatusNotEnrolled(cb: any, pageCB?: any): void;
    allFlows(cb: any, pageCB?: any): void;
    individualFlows(personSubscriptionId: any, cb: any, pageCB?: any): void;
    authenticateEvent(payload: any, headers: any, cb: any, pageCB?: any): void;
}
